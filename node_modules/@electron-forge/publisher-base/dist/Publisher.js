"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PublisherBase = exports.default = void 0;
class Publisher {
    /**
   * @param config - A configuration object for this publisher
   * @param platformsToPublishOn - If you want this maker to run on platforms different from `defaultPlatforms` you can provide those platforms here
   */ constructor(config, platformsToPublishOn){
        this.config = config;
        this.platformsToPublishOn = platformsToPublishOn;
        this.config = config;
        Object.defineProperty(this, '__isElectronForgePublisher', {
            value: true,
            enumerable: false,
            configurable: false
        });
    }
    get platforms() {
        if (this.platformsToPublishOn) return this.platformsToPublishOn;
        if (this.defaultPlatforms) return this.defaultPlatforms;
        return [
            'win32',
            'linux',
            'darwin',
            'mas'
        ];
    }
    /**
   * Publishers must implement this method to publish the artifacts returned from
   * make calls.  If any errors occur you must throw them, failing silently or simply
   * logging will not propagate issues up to forge.
   *
   * Please note for a given version publish will be called multiple times, once
   * for each set of "platform" and "arch".  This means if you are publishing
   * darwin and win32 artifacts to somewhere like GitHub on the first publish call
   * you will have to create the version on GitHub and the second call will just
   * be appending files to the existing version.
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async publish(opts) {
        throw new Error(`Publisher ${this.name} did not implement the publish method`);
    }
}
exports.default = Publisher;
exports.PublisherBase = Publisher;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QdWJsaXNoZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VNYWtlUmVzdWx0LCBGb3JnZVBsYXRmb3JtLCBJRm9yZ2VQdWJsaXNoZXIsIFJlc29sdmVkRm9yZ2VDb25maWcgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBQdWJsaXNoZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBiYXNlIGRpcmVjdG9yeSBvZiB0aGUgYXBwcyBzb3VyY2UgY29kZVxuICAgKi9cbiAgZGlyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcmVzdWx0cyBmcm9tIHJ1bm5pbmcgdGhlIG1ha2UgY29tbWFuZFxuICAgKi9cbiAgbWFrZVJlc3VsdHM6IEZvcmdlTWFrZVJlc3VsdFtdO1xuICAvKipcbiAgICogVGhlIHJhdyBmb3JnZUNvbmZpZyB0aGlzIGFwcCBpcyB1c2luZy5cbiAgICpcbiAgICogWW91IHByb2JhYmx5IHNob3VsZG4ndCB1c2UgdGhpc1xuICAgKi9cbiAgZm9yZ2VDb25maWc6IFJlc29sdmVkRm9yZ2VDb25maWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFB1Ymxpc2hlcjxDPiBpbXBsZW1lbnRzIElGb3JnZVB1Ymxpc2hlciB7XG4gIHB1YmxpYyBhYnN0cmFjdCBuYW1lOiBzdHJpbmc7XG5cbiAgcHVibGljIGRlZmF1bHRQbGF0Zm9ybXM/OiBGb3JnZVBsYXRmb3JtW107XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfX2lzRWxlY3Ryb25Gb3JnZVB1Ymxpc2hlciE6IHRydWU7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBjb25maWcgLSBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGlzIHB1Ymxpc2hlclxuICAgKiBAcGFyYW0gcGxhdGZvcm1zVG9QdWJsaXNoT24gLSBJZiB5b3Ugd2FudCB0aGlzIG1ha2VyIHRvIHJ1biBvbiBwbGF0Zm9ybXMgZGlmZmVyZW50IGZyb20gYGRlZmF1bHRQbGF0Zm9ybXNgIHlvdSBjYW4gcHJvdmlkZSB0aG9zZSBwbGF0Zm9ybXMgaGVyZVxuICAgKi9cbiAgY29uc3RydWN0b3IocHVibGljIGNvbmZpZzogQywgcHJvdGVjdGVkIHBsYXRmb3Jtc1RvUHVibGlzaE9uPzogRm9yZ2VQbGF0Zm9ybVtdKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdfX2lzRWxlY3Ryb25Gb3JnZVB1Ymxpc2hlcicsIHtcbiAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHBsYXRmb3JtcygpOiBGb3JnZVBsYXRmb3JtW10ge1xuICAgIGlmICh0aGlzLnBsYXRmb3Jtc1RvUHVibGlzaE9uKSByZXR1cm4gdGhpcy5wbGF0Zm9ybXNUb1B1Ymxpc2hPbjtcbiAgICBpZiAodGhpcy5kZWZhdWx0UGxhdGZvcm1zKSByZXR1cm4gdGhpcy5kZWZhdWx0UGxhdGZvcm1zO1xuICAgIHJldHVybiBbJ3dpbjMyJywgJ2xpbnV4JywgJ2RhcndpbicsICdtYXMnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXJzIG11c3QgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHB1Ymxpc2ggdGhlIGFydGlmYWN0cyByZXR1cm5lZCBmcm9tXG4gICAqIG1ha2UgY2FsbHMuICBJZiBhbnkgZXJyb3JzIG9jY3VyIHlvdSBtdXN0IHRocm93IHRoZW0sIGZhaWxpbmcgc2lsZW50bHkgb3Igc2ltcGx5XG4gICAqIGxvZ2dpbmcgd2lsbCBub3QgcHJvcGFnYXRlIGlzc3VlcyB1cCB0byBmb3JnZS5cbiAgICpcbiAgICogUGxlYXNlIG5vdGUgZm9yIGEgZ2l2ZW4gdmVyc2lvbiBwdWJsaXNoIHdpbGwgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLCBvbmNlXG4gICAqIGZvciBlYWNoIHNldCBvZiBcInBsYXRmb3JtXCIgYW5kIFwiYXJjaFwiLiAgVGhpcyBtZWFucyBpZiB5b3UgYXJlIHB1Ymxpc2hpbmdcbiAgICogZGFyd2luIGFuZCB3aW4zMiBhcnRpZmFjdHMgdG8gc29tZXdoZXJlIGxpa2UgR2l0SHViIG9uIHRoZSBmaXJzdCBwdWJsaXNoIGNhbGxcbiAgICogeW91IHdpbGwgaGF2ZSB0byBjcmVhdGUgdGhlIHZlcnNpb24gb24gR2l0SHViIGFuZCB0aGUgc2Vjb25kIGNhbGwgd2lsbCBqdXN0XG4gICAqIGJlIGFwcGVuZGluZyBmaWxlcyB0byB0aGUgZXhpc3RpbmcgdmVyc2lvbi5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgYXN5bmMgcHVibGlzaChvcHRzOiBQdWJsaXNoZXJPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQdWJsaXNoZXIgJHt0aGlzLm5hbWV9IGRpZCBub3QgaW1wbGVtZW50IHRoZSBwdWJsaXNoIG1ldGhvZGApO1xuICB9XG59XG5cbmV4cG9ydCB7IFB1Ymxpc2hlciBhcyBQdWJsaXNoZXJCYXNlIH07XG4iXSwibmFtZXMiOlsiUHVibGlzaGVyIiwiY29uZmlnIiwicGxhdGZvcm1zVG9QdWJsaXNoT24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsInBsYXRmb3JtcyIsImRlZmF1bHRQbGF0Zm9ybXMiLCJwdWJsaXNoIiwib3B0cyIsIkVycm9yIiwibmFtZSIsIlB1Ymxpc2hlckJhc2UiXSwibWFwcGluZ3MiOiI7Ozs7O01BbUI4QkEsU0FBUztJQVFyQyxFQUdHLEFBSEg7OztHQUdHLEFBSEgsRUFHRyxhQUNnQkMsTUFBUyxFQUFZQyxvQkFBc0MsQ0FBRSxDQUFDO2FBQTlERCxNQUFTLEdBQVRBLE1BQVM7YUFBWUMsb0JBQXNDLEdBQXRDQSxvQkFBc0M7UUFDNUUsSUFBSSxDQUFDRCxNQUFNLEdBQUdBLE1BQU07UUFDcEJFLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDLElBQUksRUFBRSxDQUE0Qiw2QkFBRSxDQUFDO1lBQ3pEQyxLQUFLLEVBQUUsSUFBSTtZQUNYQyxVQUFVLEVBQUUsS0FBSztZQUNqQkMsWUFBWSxFQUFFLEtBQUs7UUFDckIsQ0FBQztJQUNILENBQUM7UUFFR0MsU0FBUyxHQUFvQixDQUFDO1FBQ2hDLEVBQUUsRUFBRSxJQUFJLENBQUNOLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUNBLG9CQUFvQjtRQUMvRCxFQUFFLEVBQUUsSUFBSSxDQUFDTyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDQSxnQkFBZ0I7UUFDdkQsTUFBTSxDQUFDLENBQUM7WUFBQSxDQUFPO1lBQUUsQ0FBTztZQUFFLENBQVE7WUFBRSxDQUFLO1FBQUEsQ0FBQztJQUM1QyxDQUFDO0lBRUQsRUFVRyxBQVZIOzs7Ozs7Ozs7O0dBVUcsQUFWSCxFQVVHLENBQ0gsRUFBNkQsQUFBN0QsMkRBQTZEO1VBQ3ZEQyxPQUFPLENBQUNDLElBQXNCLEVBQWlCLENBQUM7UUFDcEQsS0FBSyxDQUFDLEdBQUcsQ0FBQ0MsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUNDLElBQUksQ0FBQyxxQ0FBcUM7SUFDOUUsQ0FBQzs7a0JBekMyQmIsU0FBUztRQTRDakJjLGFBQWEsR0FBMUJkLFNBQVMifQ==