"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _asyncOra = require("@electron-forge/async-ora");
var _coreUtils = require("@electron-forge/core-utils");
var _templateBase = _interopRequireDefault(require("@electron-forge/template-base"));
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _lodash = require("lodash");
var _installDependencies = _interopRequireWildcard(require("../util/install-dependencies"));
var _messages = require("../util/messages");
var _readPackageJson = require("../util/read-package-json");
var _upgradeForgeConfig = _interopRequireWildcard(require("../util/upgrade-forge-config"));
var _initGit = require("./init-scripts/init-git");
var _initNpm = require("./init-scripts/init-npm");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const d = (0, _debug).default('electron-forge:import');
var _default = async ({ dir =process.cwd() , interactive =false , confirmImport , shouldContinueOnExisting , shouldRemoveDependency , shouldUpdateScript , outDir  })=>{
    const calculatedOutDir = outDir || 'out';
    _asyncOra.asyncOra.interactive = interactive;
    d(`Attempting to import project in: ${dir}`);
    if (!await _fsExtra.default.pathExists(dir) || !await _fsExtra.default.pathExists(_path.default.resolve(dir, 'package.json'))) {
        throw new Error(`We couldn't find a project in: ${dir}`);
    }
    if (typeof confirmImport === 'function') {
        if (!await confirmImport()) {
            // TODO: figure out if we can just return early here
            // eslint-disable-next-line no-process-exit
            process.exit(0);
        }
    }
    await (0, _initGit).initGit(dir);
    const importDeps = [].concat(_initNpm.deps);
    let importDevDeps = [].concat(_initNpm.devDeps);
    let importExactDevDeps = [].concat(_initNpm.exactDevDeps);
    let packageJSON = await (0, _readPackageJson).readRawPackageJson(dir);
    if (!packageJSON.version) {
        (0, _messages).warn(interactive, _chalk.default.yellow(`Please set the ${_chalk.default.green('"version"')} in your application's package.json`));
    }
    if (packageJSON.config && packageJSON.config.forge) {
        if (packageJSON.config.forge.makers) {
            (0, _messages).warn(interactive, _chalk.default.green('Existing Electron Forge configuration detected'));
            if (typeof shouldContinueOnExisting === 'function') {
                if (!await shouldContinueOnExisting()) {
                    // TODO: figure out if we can just return early here
                    // eslint-disable-next-line no-process-exit
                    process.exit(0);
                }
            }
        } else if (!(typeof packageJSON.config.forge === 'object')) {
            (0, _messages).warn(interactive, _chalk.default.yellow("We can't tell if the Electron Forge config is compatible because it's in an external JavaScript file, not trying to convert it and continuing anyway"));
        } else {
            d('Upgrading an Electron Forge < 6 project');
            packageJSON.config.forge = (0, _upgradeForgeConfig).default(packageJSON.config.forge);
            importDevDeps = (0, _upgradeForgeConfig).updateUpgradedForgeDevDeps(packageJSON, importDevDeps);
        }
    }
    packageJSON.dependencies = packageJSON.dependencies || {};
    packageJSON.devDependencies = packageJSON.devDependencies || {};
    [importDevDeps, importExactDevDeps] = (0, _coreUtils).updateElectronDependency(packageJSON, importDevDeps, importExactDevDeps);
    const keys = Object.keys(packageJSON.dependencies).concat(Object.keys(packageJSON.devDependencies));
    const buildToolPackages = {
        '@electron/get': 'already uses this module as a transitive dependency',
        '@electron/osx-sign': 'already uses this module as a transitive dependency',
        'electron-builder': 'provides mostly equivalent functionality',
        'electron-download': 'already uses this module as a transitive dependency',
        'electron-forge': 'replaced with @electron-forge/cli',
        'electron-installer-debian': 'already uses this module as a transitive dependency',
        'electron-installer-dmg': 'already uses this module as a transitive dependency',
        'electron-installer-flatpak': 'already uses this module as a transitive dependency',
        'electron-installer-redhat': 'already uses this module as a transitive dependency',
        'electron-packager': 'already uses this module as a transitive dependency',
        'electron-winstaller': 'already uses this module as a transitive dependency'
    };
    for (const key of keys){
        if (buildToolPackages[key]) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const explanation = buildToolPackages[key];
            let remove = true;
            if (typeof shouldRemoveDependency === 'function') {
                remove = await shouldRemoveDependency(key, explanation);
            }
            if (remove) {
                delete packageJSON.dependencies[key];
                delete packageJSON.devDependencies[key];
            }
        }
    }
    packageJSON.scripts = packageJSON.scripts || {};
    d('reading current scripts object:', packageJSON.scripts);
    const updatePackageScript = async (scriptName, newValue)=>{
        if (packageJSON.scripts[scriptName] !== newValue) {
            let update = true;
            if (typeof shouldUpdateScript === 'function') {
                update = await shouldUpdateScript(scriptName, newValue);
            }
            if (update) {
                packageJSON.scripts[scriptName] = newValue;
            }
        }
    };
    await updatePackageScript('start', 'electron-forge start');
    await updatePackageScript('package', 'electron-forge package');
    await updatePackageScript('make', 'electron-forge make');
    d('forgified scripts object:', packageJSON.scripts);
    const writeChanges = async ()=>{
        await (0, _asyncOra).asyncOra('Writing modified package.json file', async ()=>{
            await _fsExtra.default.writeJson(_path.default.resolve(dir, 'package.json'), packageJSON, {
                spaces: 2
            });
        });
    };
    await writeChanges();
    await (0, _asyncOra).asyncOra('Installing dependencies', async ()=>{
        d('deleting old dependencies forcefully');
        await _fsExtra.default.remove(_path.default.resolve(dir, 'node_modules/.bin/electron'));
        await _fsExtra.default.remove(_path.default.resolve(dir, 'node_modules/.bin/electron.cmd'));
        d('installing dependencies');
        await (0, _installDependencies).default(dir, importDeps);
        d('installing devDependencies');
        await (0, _installDependencies).default(dir, importDevDeps, _installDependencies.DepType.DEV);
        d('installing exactDevDependencies');
        await (0, _installDependencies).default(dir, importExactDevDeps, _installDependencies.DepType.DEV, _installDependencies.DepVersionRestriction.EXACT);
    });
    await (0, _asyncOra).asyncOra('Copying base template Forge configuration', async ()=>{
        var ref;
        const pathToTemplateConfig = _path.default.resolve(_templateBase.default.templateDir, 'forge.config.js');
        // if there's an existing config.forge object in package.json
        if ((packageJSON === null || packageJSON === void 0 ? void 0 : (ref = packageJSON.config) === null || ref === void 0 ? void 0 : ref.forge) && typeof packageJSON.config.forge === 'object') {
            d('detected existing Forge config in package.json, merging with base template Forge config');
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const templateConfig = require(_path.default.resolve(_templateBase.default.templateDir, 'forge.config.js'));
            packageJSON = await (0, _readPackageJson).readRawPackageJson(dir);
            (0, _lodash).merge(templateConfig, packageJSON.config.forge); // mutates the templateConfig object
            await writeChanges();
        // otherwise, write to forge.config.js
        } else {
            d('writing new forge.config.js');
            await _fsExtra.default.copyFile(pathToTemplateConfig, _path.default.resolve(dir, 'forge.config.js'));
        }
    });
    await (0, _asyncOra).asyncOra('Fixing .gitignore', async ()=>{
        if (await _fsExtra.default.pathExists(_path.default.resolve(dir, '.gitignore'))) {
            const gitignore = await _fsExtra.default.readFile(_path.default.resolve(dir, '.gitignore'));
            if (!gitignore.includes(calculatedOutDir)) {
                await _fsExtra.default.writeFile(_path.default.resolve(dir, '.gitignore'), `${gitignore}\n${calculatedOutDir}/`);
            }
        }
    });
    (0, _messages).info(interactive, `

We have attempted to convert your app to be in a format that Electron Forge understands.

Thanks for using ${_chalk.default.green('Electron Forge')}!`);
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,