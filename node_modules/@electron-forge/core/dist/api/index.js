"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ElectronProcess", {
    enumerable: true,
    get: function() {
        return _sharedTypes.ElectronProcess;
    }
});
Object.defineProperty(exports, "ForgeMakeResult", {
    enumerable: true,
    get: function() {
        return _sharedTypes.ForgeMakeResult;
    }
});
Object.defineProperty(exports, "ForgeUtils", {
    enumerable: true,
    get: function() {
        return _util.default;
    }
});
Object.defineProperty(exports, "ImportOptions", {
    enumerable: true,
    get: function() {
        return _import.ImportOptions;
    }
});
Object.defineProperty(exports, "InitOptions", {
    enumerable: true,
    get: function() {
        return _init.InitOptions;
    }
});
Object.defineProperty(exports, "MakeOptions", {
    enumerable: true,
    get: function() {
        return _make.MakeOptions;
    }
});
Object.defineProperty(exports, "PackageOptions", {
    enumerable: true,
    get: function() {
        return _package.PackageOptions;
    }
});
Object.defineProperty(exports, "PublishOptions", {
    enumerable: true,
    get: function() {
        return _publish.PublishOptions;
    }
});
Object.defineProperty(exports, "StartOptions", {
    enumerable: true,
    get: function() {
        return _start.StartOptions;
    }
});
exports.utils = exports.api = void 0;
var _sharedTypes = require("@electron-forge/shared-types");
var _util = _interopRequireDefault(require("../util"));
var _import = _interopRequireWildcard(require("./import"));
var _init = _interopRequireWildcard(require("./init"));
var _make = _interopRequireWildcard(require("./make"));
var _package = _interopRequireWildcard(require("./package"));
var _publish = _interopRequireWildcard(require("./publish"));
var _start = _interopRequireWildcard(require("./start"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
class ForgeAPI {
    /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */ import(opts) {
        return (0, _import).default(opts);
    }
    /**
   * Initialize a new Electron Forge template project in the given directory.
   */ init(opts) {
        return (0, _init).default(opts);
    }
    /**
   * Make distributables for an Electron application
   */ make(opts) {
        return (0, _make).default(opts);
    }
    /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */ package(opts) {
        return (0, _package).default(opts);
    }
    /**
   * Publish an Electron application into the given target service
   */ publish(opts) {
        return (0, _publish).default(opts);
    }
    /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */ start(opts) {
        return (0, _start).default(opts);
    }
}
exports.ForgeAPI = ForgeAPI;
const api = new ForgeAPI();
exports.api = api;
const utils = new _util.default();
exports.utils = utils;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlY3Ryb25Qcm9jZXNzLCBGb3JnZU1ha2VSZXN1bHQgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IEZvcmdlVXRpbHMgZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCBfaW1wb3J0LCB7IEltcG9ydE9wdGlvbnMgfSBmcm9tICcuL2ltcG9ydCc7XG5pbXBvcnQgaW5pdCwgeyBJbml0T3B0aW9ucyB9IGZyb20gJy4vaW5pdCc7XG5pbXBvcnQgbWFrZSwgeyBNYWtlT3B0aW9ucyB9IGZyb20gJy4vbWFrZSc7XG5pbXBvcnQgX3BhY2thZ2UsIHsgUGFja2FnZU9wdGlvbnMgfSBmcm9tICcuL3BhY2thZ2UnO1xuaW1wb3J0IHB1Ymxpc2gsIHsgUHVibGlzaE9wdGlvbnMgfSBmcm9tICcuL3B1Ymxpc2gnO1xuaW1wb3J0IHN0YXJ0LCB7IFN0YXJ0T3B0aW9ucyB9IGZyb20gJy4vc3RhcnQnO1xuXG5leHBvcnQgY2xhc3MgRm9yZ2VBUEkge1xuICAvKipcbiAgICogQXR0ZW1wdCB0byBpbXBvcnQgYSBnaXZlbiBtb2R1bGUgZGlyZWN0b3J5IHRvIHRoZSBFbGVjdHJvbiBGb3JnZSBzdGFuZGFyZC5cbiAgICpcbiAgICogKiBTZXRzIHVwIGBnaXRgIGFuZCB0aGUgY29ycmVjdCBOUE0gZGVwZW5kZW5jaWVzXG4gICAqICogQWRkcyBhIHRlbXBsYXRlIGZvcmdlIGNvbmZpZyB0byBgcGFja2FnZS5qc29uYFxuICAgKi9cbiAgaW1wb3J0KG9wdHM6IEltcG9ydE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gX2ltcG9ydChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgbmV3IEVsZWN0cm9uIEZvcmdlIHRlbXBsYXRlIHByb2plY3QgaW4gdGhlIGdpdmVuIGRpcmVjdG9yeS5cbiAgICovXG4gIGluaXQob3B0czogSW5pdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gaW5pdChvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIGRpc3RyaWJ1dGFibGVzIGZvciBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvblxuICAgKi9cbiAgbWFrZShvcHRzOiBNYWtlT3B0aW9ucyk6IFByb21pc2U8Rm9yZ2VNYWtlUmVzdWx0W10+IHtcbiAgICByZXR1cm4gbWFrZShvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBob29rcyBpZiB0aGV5IGFyZSBhIHBhdGggdG8gYSBmaWxlIChpbnN0ZWFkIG9mIGEgYEZ1bmN0aW9uYClcbiAgICovXG4gIHBhY2thZ2Uob3B0czogUGFja2FnZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gX3BhY2thZ2Uob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGlzaCBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvbiBpbnRvIHRoZSBnaXZlbiB0YXJnZXQgc2VydmljZVxuICAgKi9cbiAgcHVibGlzaChvcHRzOiBQdWJsaXNoT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBwdWJsaXNoKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBIYW5kbGVzIHRoaW5ncyBsaWtlIG5hdGl2ZSBtb2R1bGUgcmVidWlsZGluZyBmb3IgeW91IG9uIHRoZSBmbHlcbiAgICovXG4gIHN0YXJ0KG9wdHM6IFN0YXJ0T3B0aW9ucyk6IFByb21pc2U8RWxlY3Ryb25Qcm9jZXNzPiB7XG4gICAgcmV0dXJuIHN0YXJ0KG9wdHMpO1xuICB9XG59XG5cbmNvbnN0IGFwaSA9IG5ldyBGb3JnZUFQSSgpO1xuY29uc3QgdXRpbHMgPSBuZXcgRm9yZ2VVdGlscygpO1xuXG5leHBvcnQgeyBGb3JnZU1ha2VSZXN1bHQsIEVsZWN0cm9uUHJvY2VzcywgRm9yZ2VVdGlscywgSW1wb3J0T3B0aW9ucywgSW5pdE9wdGlvbnMsIE1ha2VPcHRpb25zLCBQYWNrYWdlT3B0aW9ucywgUHVibGlzaE9wdGlvbnMsIFN0YXJ0T3B0aW9ucywgYXBpLCB1dGlscyB9O1xuIl0sIm5hbWVzIjpbIkVsZWN0cm9uUHJvY2VzcyIsIkZvcmdlTWFrZVJlc3VsdCIsIkZvcmdlVXRpbHMiLCJJbXBvcnRPcHRpb25zIiwiSW5pdE9wdGlvbnMiLCJNYWtlT3B0aW9ucyIsIlBhY2thZ2VPcHRpb25zIiwiUHVibGlzaE9wdGlvbnMiLCJTdGFydE9wdGlvbnMiLCJGb3JnZUFQSSIsImltcG9ydCIsIm9wdHMiLCJfaW1wb3J0IiwiaW5pdCIsIm1ha2UiLCJwYWNrYWdlIiwiX3BhY2thZ2UiLCJwdWJsaXNoIiwic3RhcnQiLCJhcGkiLCJ1dGlscyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkErRDBCQSxDQUFlOzs7ZUFBZkEsWUFBZTs7OytCQUFoQ0MsQ0FBZTs7O2VBQWZBLFlBQWU7OzsrQkFBbUJDLENBQVU7OztlQUFWQSxLQUFVOzs7K0JBQUVDLENBQWE7OztlQUFiQSxPQUFhOzs7K0JBQUVDLENBQVc7OztlQUFYQSxLQUFXOzs7K0JBQUVDLENBQVc7OztlQUFYQSxLQUFXOzs7K0JBQUVDLENBQWM7OztlQUFkQSxRQUFjOzs7K0JBQUVDLENBQWM7OztlQUFkQSxRQUFjOzs7K0JBQUVDLENBQVk7OztlQUFaQSxNQUFZOzs7O0FBL0QzRixHQUE4QixDQUE5QixZQUE4QjtBQUV4RCxHQUFTLENBQVQsS0FBUztBQUVPLEdBQVUsQ0FBVixPQUFVO0FBQ2YsR0FBUSxDQUFSLEtBQVE7QUFDUixHQUFRLENBQVIsS0FBUTtBQUNELEdBQVcsQ0FBWCxRQUFXO0FBQ1osR0FBVyxDQUFYLFFBQVc7QUFDZixHQUFTLENBQVQsTUFBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BRWhDQyxRQUFRO0lBQ25CLEVBS0csQUFMSDs7Ozs7R0FLRyxBQUxILEVBS0csQ0FDSEMsTUFBTSxDQUFDQyxJQUFtQixFQUFpQixDQUFDO1FBQzFDLE1BQU0sS0FBQ0MsT0FBTyxVQUFDRCxJQUFJO0lBQ3JCLENBQUM7SUFFRCxFQUVHLEFBRkg7O0dBRUcsQUFGSCxFQUVHLENBQ0hFLElBQUksQ0FBQ0YsSUFBaUIsRUFBaUIsQ0FBQztRQUN0QyxNQUFNLEtBQUNFLEtBQUksVUFBQ0YsSUFBSTtJQUNsQixDQUFDO0lBRUQsRUFFRyxBQUZIOztHQUVHLEFBRkgsRUFFRyxDQUNIRyxJQUFJLENBQUNILElBQWlCLEVBQThCLENBQUM7UUFDbkQsTUFBTSxLQUFDRyxLQUFJLFVBQUNILElBQUk7SUFDbEIsQ0FBQztJQUVELEVBRUcsQUFGSDs7R0FFRyxBQUZILEVBRUcsQ0FDSEksT0FBTyxDQUFDSixJQUFvQixFQUFpQixDQUFDO1FBQzVDLE1BQU0sS0FBQ0ssUUFBUSxVQUFDTCxJQUFJO0lBQ3RCLENBQUM7SUFFRCxFQUVHLEFBRkg7O0dBRUcsQUFGSCxFQUVHLENBQ0hNLE9BQU8sQ0FBQ04sSUFBb0IsRUFBaUIsQ0FBQztRQUM1QyxNQUFNLEtBQUNNLFFBQU8sVUFBQ04sSUFBSTtJQUNyQixDQUFDO0lBRUQsRUFJRyxBQUpIOzs7O0dBSUcsQUFKSCxFQUlHLENBQ0hPLEtBQUssQ0FBQ1AsSUFBa0IsRUFBNEIsQ0FBQztRQUNuRCxNQUFNLEtBQUNPLE1BQUssVUFBQ1AsSUFBSTtJQUNuQixDQUFDOztRQTlDVUYsUUFBUSxHQUFSQSxRQUFRO0FBaURyQixLQUFLLENBQUNVLEdBQUcsR0FBRyxHQUFHLENBQUNWLFFBQVE7UUFHc0hVLEdBQUcsR0FBSEEsR0FBRztBQUZqSixLQUFLLENBQUNDLEtBQUssR0FBRyxHQUFHLENBQUNsQixLQUFVO1FBRXVIa0IsS0FBSyxHQUFMQSxLQUFLIn0=