"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _asyncOra = require("@electron-forge/async-ora");
var _coreUtils = require("@electron-forge/core-utils");
var _makerBase = require("@electron-forge/maker-base");
var _get = require("@electron/get");
var _chalk = _interopRequireDefault(require("chalk"));
var _filenamify = _interopRequireDefault(require("filenamify"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));
var _hook = require("../util/hook");
var _messages = require("../util/messages");
var _outDir = _interopRequireDefault(require("../util/out-dir"));
var _parseArchs = _interopRequireDefault(require("../util/parse-archs"));
var _readPackageJson = require("../util/read-package-json");
var _requireSearch = _interopRequireDefault(require("../util/require-search"));
var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));
var _package = _interopRequireDefault(require("./package"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
class MakerImpl extends _makerBase.MakerBase {
    constructor(...args){
        super(...args);
        this.name = 'impl';
        this.defaultPlatforms = [];
    }
}
function generateTargets(forgeConfig, overrideTargets) {
    if (overrideTargets) {
        return overrideTargets.map((target)=>{
            if (typeof target === 'string') {
                return forgeConfig.makers.find((maker)=>maker.name === target
                ) || {
                    name: target
                };
            }
            return target;
        });
    }
    return forgeConfig.makers;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isElectronForgeMaker(target) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return target.__isElectronForgeMaker;
}
var _default = async ({ dir =process.cwd() , interactive =false , skipPackage =false , arch =(0, _get).getHostArch() , platform =process.platform , overrideTargets , outDir  })=>{
    _asyncOra.asyncOra.interactive = interactive;
    let forgeConfig;
    await (0, _asyncOra).asyncOra('Resolving Forge Config', async ()=>{
        const resolvedDir = await (0, _resolveDir).default(dir);
        if (!resolvedDir) {
            throw new Error(`Failed to locate makeable Electron application at ${dir}`);
        }
        dir = resolvedDir;
        forgeConfig = await (0, _forgeConfig).default(dir);
    });
    const actualOutDir = outDir || (0, _outDir).default(dir, forgeConfig);
    const actualTargetPlatform = platform;
    platform = platform === 'mas' ? 'darwin' : platform;
    if (![
        'darwin',
        'win32',
        'linux',
        'mas'
    ].includes(actualTargetPlatform)) {
        throw new Error(`'${actualTargetPlatform}' is an invalid platform. Choices are 'darwin', 'mas', 'win32' or 'linux'.`);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const makers = {};
    let targets = generateTargets(forgeConfig, overrideTargets);
    let targetId = 0;
    for (const target of targets){
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */ let maker;
        if (isElectronForgeMaker(target)) {
            maker = target;
            if (!maker.platforms.includes(actualTargetPlatform)) continue;
        } else {
            const resolvableTarget = target;
            // non-false falsy values should be 'true'
            if (resolvableTarget.enabled === false) continue;
            if (!resolvableTarget.name) {
                throw new Error(`The following maker config is missing a maker name: ${JSON.stringify(resolvableTarget)}`);
            } else if (typeof resolvableTarget.name !== 'string') {
                throw new Error(`The following maker config has a maker name that is not a string: ${JSON.stringify(resolvableTarget)}`);
            }
            const MakerClass = (0, _requireSearch).default(dir, [
                resolvableTarget.name
            ]);
            if (!MakerClass) {
                throw new Error(`Could not find module with name '${resolvableTarget.name}'. If this is a package from NPM, make sure it's listed in the devDependencies of your package.json. If this is a local module, make sure you have the correct path to its entry point. Try using the DEBUG="electron-forge:require-search" environment variable for more information.`);
            }
            maker = new MakerClass(resolvableTarget.config, resolvableTarget.platforms || undefined);
            if (!maker.platforms.includes(actualTargetPlatform)) continue;
        }
        if (!maker.isSupportedOnCurrentPlatform) {
            throw new Error([
                `Maker for target ${maker.name} is incompatible with this version of `,
                'Electron Forge, please upgrade or contact the maintainer ',
                "(needs to implement 'isSupportedOnCurrentPlatform)')", 
            ].join(''));
        }
        if (!maker.isSupportedOnCurrentPlatform()) {
            throw new Error(`Cannot make for ${platform} and target ${maker.name}: the maker declared that it cannot run on ${process.platform}.`);
        }
        maker.ensureExternalBinariesExist();
        makers[targetId] = maker;
        targetId += 1;
    }
    if (!skipPackage) {
        (0, _messages).info(interactive, _chalk.default.green('We need to package your application before we can make it'));
        await (0, _package).default({
            dir,
            interactive,
            arch,
            outDir: actualOutDir,
            platform: actualTargetPlatform
        });
    } else {
        (0, _messages).warn(interactive, _chalk.default.red('WARNING: Skipping the packaging step, this could result in an out of date build'));
    }
    targets = targets.filter((_, i)=>makers[i]
    );
    if (targets.length === 0) {
        throw new Error(`Could not find any make targets configured for the "${actualTargetPlatform}" platform.`);
    }
    (0, _messages).info(interactive, `Making for the following targets: ${_chalk.default.cyan(`${targets.map((_t, i)=>makers[i].name
    ).join(', ')}`)}`);
    const packageJSON = await (0, _readPackageJson).readMutatedPackageJson(dir, forgeConfig);
    const appName = (0, _filenamify).default(forgeConfig.packagerConfig.name || packageJSON.productName || packageJSON.name, {
        replacement: '-'
    });
    const outputs = [];
    await (0, _hook).runHook(forgeConfig, 'preMake');
    for (const targetArch of (0, _parseArchs).default(platform, arch, await (0, _coreUtils).getElectronVersion(dir, packageJSON))){
        const packageDir = _path.default.resolve(actualOutDir, `${appName}-${actualTargetPlatform}-${targetArch}`);
        if (!await _fsExtra.default.pathExists(packageDir)) {
            throw new Error(`Couldn't find packaged app at: ${packageDir}`);
        }
        targetId = 0;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (const _target of targets){
            const maker = makers[targetId];
            targetId += 1;
            await (0, _asyncOra).asyncOra(`Making for target: ${_chalk.default.green(maker.name)} - On platform: ${_chalk.default.cyan(actualTargetPlatform)} - For arch: ${_chalk.default.cyan(targetArch)}`, async ()=>{
                try {
                    /**
             * WARNING: DO NOT ATTEMPT TO PARALLELIZE MAKERS
             *
             * Currently it is assumed we have 1 maker per make call but that is
             * not enforced.  It is technically possible to have 1 maker be called
             * multiple times.  The "prepareConfig" method however implicitly
             * requires a lock that is not enforced.  There are two options:
             *
             *   * Provide makers a getConfig() method
             *   * Remove support for config being provided as a method
             *   * Change the entire API of maker from a single constructor to
             *     providing a MakerFactory
             */ maker.prepareConfig(targetArch);
                    const artifacts = await maker.make({
                        appName,
                        forgeConfig,
                        packageJSON,
                        targetArch,
                        dir: packageDir,
                        makeDir: _path.default.resolve(actualOutDir, 'make'),
                        targetPlatform: actualTargetPlatform
                    });
                    outputs.push({
                        artifacts,
                        packageJSON,
                        platform: actualTargetPlatform,
                        arch: targetArch
                    });
                } catch (err) {
                    if (err instanceof Error) {
                        throw {
                            message: `An error occured while making for target: ${maker.name}`,
                            stack: `${err.message}\n${err.stack}`
                        };
                    } else if (err) {
                        throw err;
                    } else {
                        throw new Error(`An unknown error occured while making for target: ${maker.name}`);
                    }
                }
            });
        }
    }
    // If the postMake hooks modifies the locations / names of the outputs it must return
    // the new locations so that the publish step knows where to look
    return (0, _hook).runMutatingHook(forgeConfig, 'postMake', outputs);
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,