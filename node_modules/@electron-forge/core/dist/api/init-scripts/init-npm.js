"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.siblingDep = siblingDep;
exports.initNPM = exports.exactDevDeps = exports.devDeps = exports.deps = void 0;
var _path = _interopRequireDefault(require("path"));
var _coreUtils = require("@electron-forge/core-utils");
var _debug = _interopRequireDefault(require("debug"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _installDependencies = _interopRequireWildcard(require("../../util/install-dependencies"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const d = (0, _debug).default('electron-forge:init:npm');
const corePackage = _fsExtra.default.readJsonSync(_path.default.resolve(__dirname, '../../../package.json'));
function siblingDep(name) {
    return `@electron-forge/${name}@^${corePackage.version}`;
}
const deps = [
    'electron-squirrel-startup'
];
exports.deps = deps;
const devDeps = [
    siblingDep('cli'),
    siblingDep('maker-squirrel'),
    siblingDep('maker-zip'),
    siblingDep('maker-deb'),
    siblingDep('maker-rpm')
];
exports.devDeps = devDeps;
const exactDevDeps = [
    'electron'
];
exports.exactDevDeps = exactDevDeps;
const initNPM = async (dir, task)=>{
    d('installing dependencies');
    const packageManager = (0, _coreUtils).safeYarnOrNpm();
    task.output = `${packageManager} install ${deps.join(' ')}`;
    await (0, _installDependencies).default(dir, deps);
    d('installing devDependencies');
    task.output = `${packageManager} install --dev ${deps.join(' ')}`;
    await (0, _installDependencies).default(dir, devDeps, _installDependencies.DepType.DEV);
    d('installing exact devDependencies');
    for (const packageName of exactDevDeps){
        task.output = `${packageManager} install --dev --exact ${packageName}`;
        await (0, _installDependencies).default(dir, [
            packageName
        ], _installDependencies.DepType.DEV, _installDependencies.DepVersionRestriction.EXACT);
    }
};
exports.initNPM = initNPM;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtbnBtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBzYWZlWWFybk9yTnBtIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUtdXRpbHMnO1xuaW1wb3J0IHsgRm9yZ2VMaXN0clRhc2sgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuXG5pbXBvcnQgaW5zdGFsbERlcExpc3QsIHsgRGVwVHlwZSwgRGVwVmVyc2lvblJlc3RyaWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbC9pbnN0YWxsLWRlcGVuZGVuY2llcyc7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdDpucG0nKTtcbmNvbnN0IGNvcmVQYWNrYWdlID0gZnMucmVhZEpzb25TeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi9wYWNrYWdlLmpzb24nKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWJsaW5nRGVwKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgQGVsZWN0cm9uLWZvcmdlLyR7bmFtZX1AXiR7Y29yZVBhY2thZ2UudmVyc2lvbn1gO1xufVxuXG5leHBvcnQgY29uc3QgZGVwcyA9IFsnZWxlY3Ryb24tc3F1aXJyZWwtc3RhcnR1cCddO1xuZXhwb3J0IGNvbnN0IGRldkRlcHMgPSBbc2libGluZ0RlcCgnY2xpJyksIHNpYmxpbmdEZXAoJ21ha2VyLXNxdWlycmVsJyksIHNpYmxpbmdEZXAoJ21ha2VyLXppcCcpLCBzaWJsaW5nRGVwKCdtYWtlci1kZWInKSwgc2libGluZ0RlcCgnbWFrZXItcnBtJyldO1xuZXhwb3J0IGNvbnN0IGV4YWN0RGV2RGVwcyA9IFsnZWxlY3Ryb24nXTtcblxuZXhwb3J0IGNvbnN0IGluaXROUE0gPSBhc3luYyAoZGlyOiBzdHJpbmcsIHRhc2s6IEZvcmdlTGlzdHJUYXNrPGFueT4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgZCgnaW5zdGFsbGluZyBkZXBlbmRlbmNpZXMnKTtcbiAgY29uc3QgcGFja2FnZU1hbmFnZXIgPSBzYWZlWWFybk9yTnBtKCk7XG4gIHRhc2sub3V0cHV0ID0gYCR7cGFja2FnZU1hbmFnZXJ9IGluc3RhbGwgJHtkZXBzLmpvaW4oJyAnKX1gO1xuICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIGRlcHMpO1xuXG4gIGQoJ2luc3RhbGxpbmcgZGV2RGVwZW5kZW5jaWVzJyk7XG4gIHRhc2sub3V0cHV0ID0gYCR7cGFja2FnZU1hbmFnZXJ9IGluc3RhbGwgLS1kZXYgJHtkZXBzLmpvaW4oJyAnKX1gO1xuICBhd2FpdCBpbnN0YWxsRGVwTGlzdChkaXIsIGRldkRlcHMsIERlcFR5cGUuREVWKTtcblxuICBkKCdpbnN0YWxsaW5nIGV4YWN0IGRldkRlcGVuZGVuY2llcycpO1xuICBmb3IgKGNvbnN0IHBhY2thZ2VOYW1lIG9mIGV4YWN0RGV2RGVwcykge1xuICAgIHRhc2sub3V0cHV0ID0gYCR7cGFja2FnZU1hbmFnZXJ9IGluc3RhbGwgLS1kZXYgLS1leGFjdCAke3BhY2thZ2VOYW1lfWA7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCBbcGFja2FnZU5hbWVdLCBEZXBUeXBlLkRFViwgRGVwVmVyc2lvblJlc3RyaWN0aW9uLkVYQUNUKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJzaWJsaW5nRGVwIiwiZCIsImRlYnVnIiwiY29yZVBhY2thZ2UiLCJmcyIsInJlYWRKc29uU3luYyIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwibmFtZSIsInZlcnNpb24iLCJkZXBzIiwiZGV2RGVwcyIsImV4YWN0RGV2RGVwcyIsImluaXROUE0iLCJkaXIiLCJ0YXNrIiwicGFja2FnZU1hbmFnZXIiLCJzYWZlWWFybk9yTnBtIiwib3V0cHV0Iiwiam9pbiIsImluc3RhbGxEZXBMaXN0IiwiRGVwVHlwZSIsIkRFViIsInBhY2thZ2VOYW1lIiwiRGVwVmVyc2lvblJlc3RyaWN0aW9uIiwiRVhBQ1QiXSwibWFwcGluZ3MiOiI7Ozs7UUFZZ0JBLFVBQVUsR0FBVkEsVUFBVTs7QUFaVCxHQUFNLENBQU4sS0FBTTtBQUVPLEdBQTRCLENBQTVCLFVBQTRCO0FBRXhDLEdBQU8sQ0FBUCxNQUFPO0FBQ1YsR0FBVSxDQUFWLFFBQVU7QUFFc0MsR0FBaUMsQ0FBakMsb0JBQWlDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFaEcsS0FBSyxDQUFDQyxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUF5QjtBQUN6QyxLQUFLLENBQUNDLFdBQVcsR0FBR0MsUUFBRSxTQUFDQyxZQUFZLENBQUNDLEtBQUksU0FBQ0MsT0FBTyxDQUFDQyxTQUFTLEVBQUUsQ0FBdUI7U0FFbkVSLFVBQVUsQ0FBQ1MsSUFBWSxFQUFVLENBQUM7SUFDaEQsTUFBTSxFQUFFLGdCQUFnQixFQUFFQSxJQUFJLENBQUMsRUFBRSxFQUFFTixXQUFXLENBQUNPLE9BQU87QUFDeEQsQ0FBQztBQUVNLEtBQUssQ0FBQ0MsSUFBSSxHQUFHLENBQUM7SUFBQSxDQUEyQjtBQUFBLENBQUM7UUFBcENBLElBQUksR0FBSkEsSUFBSTtBQUNWLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLENBQUNaO0lBQUFBLFVBQVUsQ0FBQyxDQUFLO0lBQUdBLFVBQVUsQ0FBQyxDQUFnQjtJQUFHQSxVQUFVLENBQUMsQ0FBVztJQUFHQSxVQUFVLENBQUMsQ0FBVztJQUFHQSxVQUFVLENBQUMsQ0FBVztBQUFDLENBQUM7UUFBdElZLE9BQU8sR0FBUEEsT0FBTztBQUNiLEtBQUssQ0FBQ0MsWUFBWSxHQUFHLENBQUM7SUFBQSxDQUFVO0FBQUEsQ0FBQztRQUEzQkEsWUFBWSxHQUFaQSxZQUFZO0FBRWxCLEtBQUssQ0FBQ0MsT0FBTyxVQUFVQyxHQUFXLEVBQUVDLElBQXlCLEdBQW9CLENBQUM7SUFDdkZmLENBQUMsQ0FBQyxDQUF5QjtJQUMzQixLQUFLLENBQUNnQixjQUFjLE9BQUdDLFVBQWE7SUFDcENGLElBQUksQ0FBQ0csTUFBTSxNQUFNRixjQUFjLENBQUMsU0FBUyxFQUFFTixJQUFJLENBQUNTLElBQUksQ0FBQyxDQUFHO0lBQ3hELEtBQUssS0FBQ0Msb0JBQWMsVUFBQ04sR0FBRyxFQUFFSixJQUFJO0lBRTlCVixDQUFDLENBQUMsQ0FBNEI7SUFDOUJlLElBQUksQ0FBQ0csTUFBTSxNQUFNRixjQUFjLENBQUMsZUFBZSxFQUFFTixJQUFJLENBQUNTLElBQUksQ0FBQyxDQUFHO0lBQzlELEtBQUssS0FBQ0Msb0JBQWMsVUFBQ04sR0FBRyxFQUFFSCxPQUFPLEVBQUVVLG9CQUFPLFNBQUNDLEdBQUc7SUFFOUN0QixDQUFDLENBQUMsQ0FBa0M7SUFDcEMsR0FBRyxFQUFFLEtBQUssQ0FBQ3VCLFdBQVcsSUFBSVgsWUFBWSxDQUFFLENBQUM7UUFDdkNHLElBQUksQ0FBQ0csTUFBTSxNQUFNRixjQUFjLENBQUMsdUJBQXVCLEVBQUVPLFdBQVc7UUFDcEUsS0FBSyxLQUFDSCxvQkFBYyxVQUFDTixHQUFHLEVBQUUsQ0FBQ1M7WUFBQUEsV0FBVztRQUFBLENBQUMsRUFBRUYsb0JBQU8sU0FBQ0MsR0FBRyxFQUFFRSxvQkFBcUIsdUJBQUNDLEtBQUs7SUFDbkYsQ0FBQztBQUNILENBQUM7UUFmWVosT0FBTyxHQUFQQSxPQUFPIn0=