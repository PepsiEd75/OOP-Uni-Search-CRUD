"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _pluginBase = require("@electron-forge/plugin-base");
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _requireSearch = _interopRequireDefault(require("./require-search"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:plugins');
function isForgePlugin(plugin) {
    return plugin.__isElectronForgePlugin;
}
class PluginInterface {
    constructor(dir, forgeConfig){
        this.plugins = forgeConfig.plugins.map((plugin)=>{
            if (isForgePlugin(plugin)) {
                return plugin;
            }
            if (typeof plugin === 'object' && 'name' in plugin && 'config' in plugin) {
                const { name: pluginName , config: opts  } = plugin;
                if (typeof pluginName !== 'string') {
                    throw new Error(`Expected plugin[0] to be a string but found ${pluginName}`);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const Plugin = (0, _requireSearch).default(dir, [
                    pluginName
                ]);
                if (!Plugin) {
                    throw new Error(`Could not find module with name: ${pluginName}. Make sure it's listed in the devDependencies of your package.json`);
                }
                return new Plugin(opts);
            }
            throw new Error(`Expected plugin to either be a plugin instance or a { name, config } object but found ${plugin}`);
        });
        // TODO: fix hack
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.config = null;
        Object.defineProperty(this, 'config', {
            value: forgeConfig,
            enumerable: false,
            configurable: false,
            writable: false
        });
        for (const plugin1 of this.plugins){
            plugin1.init(dir, forgeConfig);
        }
        this.triggerHook = this.triggerHook.bind(this);
        this.overrideStartLogic = this.overrideStartLogic.bind(this);
    }
    async triggerHook(hookName, hookArgs) {
        for (const plugin of this.plugins){
            if (typeof plugin.getHooks === 'function') {
                const hook = plugin.getHooks()[hookName];
                if (hook) await hook(this.config, ...hookArgs);
            }
        }
    }
    async triggerMutatingHook(hookName, ...item) {
        let result = item[0];
        for (const plugin of this.plugins){
            if (typeof plugin.getHooks === 'function') {
                const hook = plugin.getHooks()[hookName];
                if (hook) {
                    result = await hook(this.config, ...item) || result;
                }
            }
        }
        return result;
    }
    async overrideStartLogic(opts) {
        let newStartFn;
        const claimed = [];
        for (const plugin of this.plugins){
            if (typeof plugin.startLogic === 'function' && plugin.startLogic !== _pluginBase.PluginBase.prototype.startLogic) {
                claimed.push(plugin.name);
                newStartFn = plugin.startLogic;
            }
        }
        if (claimed.length > 1) {
            throw new Error(`Multiple plugins tried to take control of the start command, please remove one of them\n --> ${claimed.join(', ')}`);
        }
        if (claimed.length === 1 && newStartFn) {
            d(`plugin: "${claimed[0]}" has taken control of the start command`);
            const result = await newStartFn(opts);
            if (typeof result === 'object' && 'tasks' in result) {
                result.tasks = result.tasks.map((task)=>({
                        ...task,
                        title: `${_chalk.default.cyan(`[plugin-${claimed[0]}]`)} ${task.title}`
                    })
                );
            }
            return result;
        }
        return false;
    }
}
exports.default = PluginInterface;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3BsdWdpbi1pbnRlcmZhY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGx1Z2luQmFzZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9wbHVnaW4tYmFzZSc7XG5pbXBvcnQge1xuICBGb3JnZU11dGF0aW5nSG9va0ZuLFxuICBGb3JnZU11dGF0aW5nSG9va1NpZ25hdHVyZXMsXG4gIEZvcmdlU2ltcGxlSG9va0ZuLFxuICBGb3JnZVNpbXBsZUhvb2tTaWduYXR1cmVzLFxuICBJRm9yZ2VQbHVnaW4sXG4gIElGb3JnZVBsdWdpbkludGVyZmFjZSxcbiAgUmVzb2x2ZWRGb3JnZUNvbmZpZyxcbiAgU3RhcnRSZXN1bHQsXG59IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmltcG9ydCB7IFN0YXJ0T3B0aW9ucyB9IGZyb20gJy4uL2FwaSc7XG5cbmltcG9ydCByZXF1aXJlU2VhcmNoIGZyb20gJy4vcmVxdWlyZS1zZWFyY2gnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOnBsdWdpbnMnKTtcblxuZnVuY3Rpb24gaXNGb3JnZVBsdWdpbihwbHVnaW46IElGb3JnZVBsdWdpbiB8IHVua25vd24pOiBwbHVnaW4gaXMgSUZvcmdlUGx1Z2luIHtcbiAgcmV0dXJuIChwbHVnaW4gYXMgSUZvcmdlUGx1Z2luKS5fX2lzRWxlY3Ryb25Gb3JnZVBsdWdpbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGx1Z2luSW50ZXJmYWNlIGltcGxlbWVudHMgSUZvcmdlUGx1Z2luSW50ZXJmYWNlIHtcbiAgcHJpdmF0ZSBwbHVnaW5zOiBJRm9yZ2VQbHVnaW5bXTtcblxuICBwcml2YXRlIGNvbmZpZzogUmVzb2x2ZWRGb3JnZUNvbmZpZztcblxuICBjb25zdHJ1Y3RvcihkaXI6IHN0cmluZywgZm9yZ2VDb25maWc6IFJlc29sdmVkRm9yZ2VDb25maWcpIHtcbiAgICB0aGlzLnBsdWdpbnMgPSBmb3JnZUNvbmZpZy5wbHVnaW5zLm1hcCgocGx1Z2luKSA9PiB7XG4gICAgICBpZiAoaXNGb3JnZVBsdWdpbihwbHVnaW4pKSB7XG4gICAgICAgIHJldHVybiBwbHVnaW47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luID09PSAnb2JqZWN0JyAmJiAnbmFtZScgaW4gcGx1Z2luICYmICdjb25maWcnIGluIHBsdWdpbikge1xuICAgICAgICBjb25zdCB7IG5hbWU6IHBsdWdpbk5hbWUsIGNvbmZpZzogb3B0cyB9ID0gcGx1Z2luO1xuICAgICAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBwbHVnaW5bMF0gdG8gYmUgYSBzdHJpbmcgYnV0IGZvdW5kICR7cGx1Z2luTmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBjb25zdCBQbHVnaW4gPSByZXF1aXJlU2VhcmNoPGFueT4oZGlyLCBbcGx1Z2luTmFtZV0pO1xuICAgICAgICBpZiAoIVBsdWdpbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgbW9kdWxlIHdpdGggbmFtZTogJHtwbHVnaW5OYW1lfS4gTWFrZSBzdXJlIGl0J3MgbGlzdGVkIGluIHRoZSBkZXZEZXBlbmRlbmNpZXMgb2YgeW91ciBwYWNrYWdlLmpzb25gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFBsdWdpbihvcHRzKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBwbHVnaW4gdG8gZWl0aGVyIGJlIGEgcGx1Z2luIGluc3RhbmNlIG9yIGEgeyBuYW1lLCBjb25maWcgfSBvYmplY3QgYnV0IGZvdW5kICR7cGx1Z2lufWApO1xuICAgIH0pO1xuICAgIC8vIFRPRE86IGZpeCBoYWNrXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB0aGlzLmNvbmZpZyA9IG51bGwgYXMgYW55O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29uZmlnJywge1xuICAgICAgdmFsdWU6IGZvcmdlQ29uZmlnLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICBwbHVnaW4uaW5pdChkaXIsIGZvcmdlQ29uZmlnKTtcbiAgICB9XG5cbiAgICB0aGlzLnRyaWdnZXJIb29rID0gdGhpcy50cmlnZ2VySG9vay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub3ZlcnJpZGVTdGFydExvZ2ljID0gdGhpcy5vdmVycmlkZVN0YXJ0TG9naWMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFzeW5jIHRyaWdnZXJIb29rPEhvb2sgZXh0ZW5kcyBrZXlvZiBGb3JnZVNpbXBsZUhvb2tTaWduYXR1cmVzPihob29rTmFtZTogSG9vaywgaG9va0FyZ3M6IEZvcmdlU2ltcGxlSG9va1NpZ25hdHVyZXNbSG9va10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiB0aGlzLnBsdWdpbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmdldEhvb2tzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGhvb2sgPSBwbHVnaW4uZ2V0SG9va3MoKVtob29rTmFtZV0gYXMgRm9yZ2VTaW1wbGVIb29rRm48SG9vaz47XG4gICAgICAgIGlmIChob29rKSBhd2FpdCBob29rKHRoaXMuY29uZmlnLCAuLi5ob29rQXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdHJpZ2dlck11dGF0aW5nSG9vazxIb29rIGV4dGVuZHMga2V5b2YgRm9yZ2VNdXRhdGluZ0hvb2tTaWduYXR1cmVzPihcbiAgICBob29rTmFtZTogSG9vayxcbiAgICAuLi5pdGVtOiBGb3JnZU11dGF0aW5nSG9va1NpZ25hdHVyZXNbSG9va11cbiAgKTogUHJvbWlzZTxGb3JnZU11dGF0aW5nSG9va1NpZ25hdHVyZXNbSG9va11bMF0+IHtcbiAgICBsZXQgcmVzdWx0OiBGb3JnZU11dGF0aW5nSG9va1NpZ25hdHVyZXNbSG9va11bMF0gPSBpdGVtWzBdO1xuICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHRoaXMucGx1Z2lucykge1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW4uZ2V0SG9va3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgaG9vayA9IHBsdWdpbi5nZXRIb29rcygpW2hvb2tOYW1lXSBhcyBGb3JnZU11dGF0aW5nSG9va0ZuPEhvb2s+O1xuICAgICAgICBpZiAoaG9vaykge1xuICAgICAgICAgIHJlc3VsdCA9IChhd2FpdCBob29rKHRoaXMuY29uZmlnLCAuLi5pdGVtKSkgfHwgcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyBvdmVycmlkZVN0YXJ0TG9naWMob3B0czogU3RhcnRPcHRpb25zKTogUHJvbWlzZTxTdGFydFJlc3VsdD4ge1xuICAgIGxldCBuZXdTdGFydEZuO1xuICAgIGNvbnN0IGNsYWltZWQ6IHN0cmluZ1tdID0gW107XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbi5zdGFydExvZ2ljID09PSAnZnVuY3Rpb24nICYmIHBsdWdpbi5zdGFydExvZ2ljICE9PSBQbHVnaW5CYXNlLnByb3RvdHlwZS5zdGFydExvZ2ljKSB7XG4gICAgICAgIGNsYWltZWQucHVzaChwbHVnaW4ubmFtZSk7XG4gICAgICAgIG5ld1N0YXJ0Rm4gPSBwbHVnaW4uc3RhcnRMb2dpYztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNsYWltZWQubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBNdWx0aXBsZSBwbHVnaW5zIHRyaWVkIHRvIHRha2UgY29udHJvbCBvZiB0aGUgc3RhcnQgY29tbWFuZCwgcGxlYXNlIHJlbW92ZSBvbmUgb2YgdGhlbVxcbiAtLT4gJHtjbGFpbWVkLmpvaW4oJywgJyl9YCk7XG4gICAgfVxuICAgIGlmIChjbGFpbWVkLmxlbmd0aCA9PT0gMSAmJiBuZXdTdGFydEZuKSB7XG4gICAgICBkKGBwbHVnaW46IFwiJHtjbGFpbWVkWzBdfVwiIGhhcyB0YWtlbiBjb250cm9sIG9mIHRoZSBzdGFydCBjb21tYW5kYCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXdTdGFydEZuKG9wdHMpO1xuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmICd0YXNrcycgaW4gcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC50YXNrcyA9IHJlc3VsdC50YXNrcy5tYXAoKHRhc2spID0+ICh7XG4gICAgICAgICAgLi4udGFzayxcbiAgICAgICAgICB0aXRsZTogYCR7Y2hhbGsuY3lhbihgW3BsdWdpbi0ke2NsYWltZWRbMF19XWApfSAke3Rhc2sudGl0bGV9YCxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXSwibmFtZXMiOlsiZCIsImRlYnVnIiwiaXNGb3JnZVBsdWdpbiIsInBsdWdpbiIsIl9faXNFbGVjdHJvbkZvcmdlUGx1Z2luIiwiUGx1Z2luSW50ZXJmYWNlIiwiZGlyIiwiZm9yZ2VDb25maWciLCJwbHVnaW5zIiwibWFwIiwibmFtZSIsInBsdWdpbk5hbWUiLCJjb25maWciLCJvcHRzIiwiRXJyb3IiLCJQbHVnaW4iLCJyZXF1aXJlU2VhcmNoIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImluaXQiLCJ0cmlnZ2VySG9vayIsImJpbmQiLCJvdmVycmlkZVN0YXJ0TG9naWMiLCJob29rTmFtZSIsImhvb2tBcmdzIiwiZ2V0SG9va3MiLCJob29rIiwidHJpZ2dlck11dGF0aW5nSG9vayIsIml0ZW0iLCJyZXN1bHQiLCJuZXdTdGFydEZuIiwiY2xhaW1lZCIsInN0YXJ0TG9naWMiLCJQbHVnaW5CYXNlIiwicHJvdG90eXBlIiwicHVzaCIsImxlbmd0aCIsImpvaW4iLCJ0YXNrcyIsInRhc2siLCJ0aXRsZSIsImNoYWxrIiwiY3lhbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkIsR0FBNkIsQ0FBN0IsV0FBNkI7QUFXdEMsR0FBTyxDQUFQLE1BQU87QUFDUCxHQUFPLENBQVAsTUFBTztBQUlDLEdBQWtCLENBQWxCLGNBQWtCOzs7Ozs7QUFFNUMsS0FBSyxDQUFDQSxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUF3QjtTQUUvQkMsYUFBYSxDQUFDQyxNQUE4QixFQUEwQixDQUFDO0lBQzlFLE1BQU0sQ0FBRUEsTUFBTSxDQUFrQkMsdUJBQXVCO0FBQ3pELENBQUM7TUFFb0JDLGVBQWU7Z0JBS3RCQyxHQUFXLEVBQUVDLFdBQWdDLENBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUNDLE9BQU8sR0FBR0QsV0FBVyxDQUFDQyxPQUFPLENBQUNDLEdBQUcsRUFBRU4sTUFBTSxHQUFLLENBQUM7WUFDbEQsRUFBRSxFQUFFRCxhQUFhLENBQUNDLE1BQU0sR0FBRyxDQUFDO2dCQUMxQixNQUFNLENBQUNBLE1BQU07WUFDZixDQUFDO1lBRUQsRUFBRSxFQUFFLE1BQU0sQ0FBQ0EsTUFBTSxLQUFLLENBQVEsV0FBSSxDQUFNLFNBQUlBLE1BQU0sSUFBSSxDQUFRLFdBQUlBLE1BQU0sRUFBRSxDQUFDO2dCQUN6RSxL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