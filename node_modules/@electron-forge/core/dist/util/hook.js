"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.runMutatingHook = runMutatingHook;
exports.runHook = void 0;
var _debug = _interopRequireDefault(require("debug"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:hook');
const runHook = async (forgeConfig, hookName, ...hookArgs)=>{
    const { hooks  } = forgeConfig;
    if (hooks) {
        d(`hook triggered: ${hookName}`);
        if (typeof hooks[hookName] === 'function') {
            d('calling hook:', hookName, 'with args:', hookArgs);
            await hooks[hookName](forgeConfig, ...hookArgs);
        }
    }
    await forgeConfig.pluginInterface.triggerHook(hookName, hookArgs);
};
exports.runHook = runHook;
async function runMutatingHook(forgeConfig, hookName, ...item) {
    const { hooks  } = forgeConfig;
    if (hooks) {
        d(`hook triggered: ${hookName}`);
        if (typeof hooks[hookName] === 'function') {
            d('calling mutating hook:', hookName, 'with item:', item[0]);
            const hook = hooks[hookName];
            const result = await hook(forgeConfig, ...item);
            if (typeof result !== 'undefined') {
                item[0] = result;
            }
        }
    }
    return forgeConfig.pluginInterface.triggerMutatingHook(hookName, item[0]);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2hvb2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRm9yZ2VNdXRhdGluZ0hvb2tGbixcbiAgRm9yZ2VNdXRhdGluZ0hvb2tTaWduYXR1cmVzLFxuICBGb3JnZVNpbXBsZUhvb2tGbixcbiAgRm9yZ2VTaW1wbGVIb29rU2lnbmF0dXJlcyxcbiAgUmVzb2x2ZWRGb3JnZUNvbmZpZyxcbn0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmhvb2snKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBjb25zdCBydW5Ib29rID0gYXN5bmMgPEhvb2sgZXh0ZW5kcyBrZXlvZiBGb3JnZVNpbXBsZUhvb2tTaWduYXR1cmVzPihcbiAgZm9yZ2VDb25maWc6IFJlc29sdmVkRm9yZ2VDb25maWcsXG4gIGhvb2tOYW1lOiBIb29rLFxuICAuLi5ob29rQXJnczogRm9yZ2VTaW1wbGVIb29rU2lnbmF0dXJlc1tIb29rXVxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHsgaG9va3MgfSA9IGZvcmdlQ29uZmlnO1xuICBpZiAoaG9va3MpIHtcbiAgICBkKGBob29rIHRyaWdnZXJlZDogJHtob29rTmFtZX1gKTtcbiAgICBpZiAodHlwZW9mIGhvb2tzW2hvb2tOYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZCgnY2FsbGluZyBob29rOicsIGhvb2tOYW1lLCAnd2l0aCBhcmdzOicsIGhvb2tBcmdzKTtcbiAgICAgIGF3YWl0IChob29rc1tob29rTmFtZV0gYXMgRm9yZ2VTaW1wbGVIb29rRm48SG9vaz4pKGZvcmdlQ29uZmlnLCAuLi5ob29rQXJncyk7XG4gICAgfVxuICB9XG4gIGF3YWl0IGZvcmdlQ29uZmlnLnBsdWdpbkludGVyZmFjZS50cmlnZ2VySG9vayhob29rTmFtZSwgaG9va0FyZ3MpO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bk11dGF0aW5nSG9vazxIb29rIGV4dGVuZHMga2V5b2YgRm9yZ2VNdXRhdGluZ0hvb2tTaWduYXR1cmVzPihcbiAgZm9yZ2VDb25maWc6IFJlc29sdmVkRm9yZ2VDb25maWcsXG4gIGhvb2tOYW1lOiBIb29rLFxuICAuLi5pdGVtOiBGb3JnZU11dGF0aW5nSG9va1NpZ25hdHVyZXNbSG9va11cbik6IFByb21pc2U8Rm9yZ2VNdXRhdGluZ0hvb2tTaWduYXR1cmVzW0hvb2tdWzBdPiB7XG4gIGNvbnN0IHsgaG9va3MgfSA9IGZvcmdlQ29uZmlnO1xuICBpZiAoaG9va3MpIHtcbiAgICBkKGBob29rIHRyaWdnZXJlZDogJHtob29rTmFtZX1gKTtcbiAgICBpZiAodHlwZW9mIGhvb2tzW2hvb2tOYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZCgnY2FsbGluZyBtdXRhdGluZyBob29rOicsIGhvb2tOYW1lLCAnd2l0aCBpdGVtOicsIGl0ZW1bMF0pO1xuICAgICAgY29uc3QgaG9vayA9IGhvb2tzW2hvb2tOYW1lXSBhcyBGb3JnZU11dGF0aW5nSG9va0ZuPEhvb2s+O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaG9vayhmb3JnZUNvbmZpZywgLi4uaXRlbSk7XG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaXRlbVswXSA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcmdlQ29uZmlnLnBsdWdpbkludGVyZmFjZS50cmlnZ2VyTXV0YXRpbmdIb29rKGhvb2tOYW1lLCBpdGVtWzBdKTtcbn1cbiJdLCJuYW1lcyI6WyJydW5NdXRhdGluZ0hvb2siLCJkIiwiZGVidWciLCJydW5Ib29rIiwiZm9yZ2VDb25maWciLCJob29rTmFtZSIsImhvb2tBcmdzIiwiaG9va3MiLCJwbHVnaW5JbnRlcmZhY2UiLCJ0cmlnZ2VySG9vayIsIml0ZW0iLCJob29rIiwicmVzdWx0IiwidHJpZ2dlck11dGF0aW5nSG9vayJdLCJtYXBwaW5ncyI6Ijs7OztRQTRCc0JBLGVBQWUsR0FBZkEsZUFBZTs7QUFyQm5CLEdBQU8sQ0FBUCxNQUFPOzs7Ozs7QUFFekIsS0FBSyxDQUFDQyxDQUFDLE9BQUdDLE1BQUssVUFBQyxDQUFxQjtBQUc5QixLQUFLLENBQUNDLE9BQU8sVUFDbEJDLFdBQWdDLEVBQ2hDQyxRQUFjLEtBQ1hDLFFBQVEsR0FDTyxDQUFDO0lBQ25CLEtBQUssQ0FBQyxDQUFDLENBQUNDLEtBQUssRUFBQyxDQUFDLEdBQUdILFdBQVc7SUFDN0IsRUFBRSxFQUFFRyxLQUFLLEVBQUUsQ0FBQztRQUNWTixDQUFDLEVBQUUsZ0JBQWdCLEVBQUVJLFFBQVE7UUFDN0IsRUFBRSxFQUFFLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDRixRQUFRLE1BQU0sQ0FBVSxXQUFFLENBQUM7WUFDMUNKLENBQUMsQ0FBQyxDQUFlLGdCQUFFSSxRQUFRLEVBQUUsQ0FBWSxhQUFFQyxRQUFRO1lBQ25ELEtBQUssQ0FBRUMsS0FBSyxDQUFDRixRQUFRLEVBQThCRCxXQUFXLEtBQUtFLFFBQVE7UUFDN0UsQ0FBQztJQUNILENBQUM7SUFDRCxLQUFLLENBQUNGLFdBQVcsQ0FBQ0ksZUFBZSxDQUFDQyxXQUFXLENBQUNKLFFBQVEsRUFBRUMsUUFBUTtBQUNsRSxDQUFDO1FBZFlILE9BQU8sR0FBUEEsT0FBTztlQWdCRUgsZUFBZSxDQUNuQ0ksV0FBZ0MsRUFDaENDLFFBQWMsS0FDWEssSUFBSSxFQUN3QyxDQUFDO0lBQ2hELEtBQUssQ0FBQyxDQUFDLENBQUNILEtBQUssRUFBQyxDQUFDLEdBQUdILFdBQVc7SUFDN0IsRUFBRSxFQUFFRyxLQUFLLEVBQUUsQ0FBQztRQUNWTixDQUFDLEVBQUUsZ0JBQWdCLEVBQUVJLFFBQVE7UUFDN0IsRUFBRSxFQUFFLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDRixRQUFRLE1BQU0sQ0FBVSxXQUFFLENBQUM7WUFDMUNKLENBQUMsQ0FBQyxDQUF3Qix5QkFBRUksUUFBUSxFQUFFLENBQVksYUFBRUssSUFBSSxDQUFDLENBQUM7WUFDMUQsS0FBSyxDQUFDQyxJQUFJLEdBQUdKLEtBQUssQ0FBQ0YsUUFBUTtZQUMzQixLQUFLLENBQUNPLE1BQU0sR0FBRyxLQUFLLENBQUNELElBQUksQ0FBQ1AsV0FBVyxLQUFLTSxJQUFJO1lBQzlDLEVBQUUsRUFBRSxNQUFNLENBQUNFLE1BQU0sS0FBSyxDQUFXLFlBQUUsQ0FBQztnQkFDbENGLElBQUksQ0FBQyxDQUFDLElBQUlFLE1BQU07WUFDbEIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDUixXQUFXLENBQUNJLGVBQWUsQ0FBQ0ssbUJBQW1CLENBQUNSLFFBQVEsRUFBRUssSUFBSSxDQUFDLENBQUM7QUFDekUsQ0FBQyJ9