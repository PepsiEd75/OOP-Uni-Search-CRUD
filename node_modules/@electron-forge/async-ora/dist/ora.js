"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.fakeOra = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
require("log-symbols");
var _ora = _interopRequireDefault(require("ora"));
var _prettyMs = _interopRequireDefault(require("pretty-ms"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const d = (0, _debug).default('electron-forge:async-ora');
const useFakeOra = Boolean(process.env.DEBUG && process.env.DEBUG.includes('electron-forge'));
if (useFakeOra) {
    console.warn(_chalk.default.red('WARNING: DEBUG environment variable detected. Append the electron-forge:lifecycle namespace'));
    console.warn(_chalk.default.red('to the value of DEBUG in order to view progress indicators.'));
}
const fakeOra = (name)=>{
    let oraName = name;
    let startTime = null;
    const timing = ()=>startTime ? `-- after ${_chalk.default.cyan(`${(0, _prettyMs).default(Date.now() - startTime)}`)}` : null
    ;
    const fake = {
        start: ()=>{
            startTime = Date.now();
            d('Process Started:', fake.text);
            return fake;
        },
        fail: ()=>{
            d(_chalk.default.red(`Process Failed: ${fake.text}`), timing());
            return fake;
        },
        succeed: ()=>{
            d('Process Succeeded:', fake.text, timing());
            return fake;
        },
        stop: ()=>{
            d('Process Stopped:', fake.text, timing());
            return fake;
        },
        warn: (warning)=>{
            d('Process Warned:', warning, timing());
            return fake;
        },
        get text () {
            return oraName;
        },
        set text (newName){
            d('Process Renamed:', oraName, ' --> ', newName);
            oraName = newName;
        }
    };
    return fake;
};
exports.fakeOra = fakeOra;
var _default = useFakeOra ? fakeOra : _ora.default;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgJ2xvZy1zeW1ib2xzJztcbmltcG9ydCByZWFsT3JhIGZyb20gJ29yYSc7XG5pbXBvcnQgcHJldHR5TXMgZnJvbSAncHJldHR5LW1zJztcblxuaW1wb3J0IHsgT3JhSW1wbCB9IGZyb20gJy4vb3JhLWhhbmRsZXInO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmFzeW5jLW9yYScpO1xuXG5jb25zdCB1c2VGYWtlT3JhID0gQm9vbGVhbihwcm9jZXNzLmVudi5ERUJVRyAmJiBwcm9jZXNzLmVudi5ERUJVRy5pbmNsdWRlcygnZWxlY3Ryb24tZm9yZ2UnKSk7XG5cbmlmICh1c2VGYWtlT3JhKSB7XG4gIGNvbnNvbGUud2FybihjaGFsay5yZWQoJ1dBUk5JTkc6IERFQlVHIGVudmlyb25tZW50IHZhcmlhYmxlIGRldGVjdGVkLiBBcHBlbmQgdGhlIGVsZWN0cm9uLWZvcmdlOmxpZmVjeWNsZSBuYW1lc3BhY2UnKSk7XG4gIGNvbnNvbGUud2FybihjaGFsay5yZWQoJ3RvIHRoZSB2YWx1ZSBvZiBERUJVRyBpbiBvcmRlciB0byB2aWV3IHByb2dyZXNzIGluZGljYXRvcnMuJykpO1xufVxuXG5leHBvcnQgY29uc3QgZmFrZU9yYSA9IChuYW1lOiBzdHJpbmcpOiBPcmFJbXBsID0+IHtcbiAgbGV0IG9yYU5hbWUgPSBuYW1lO1xuICBsZXQgc3RhcnRUaW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgY29uc3QgdGltaW5nID0gKCkgPT4gKHN0YXJ0VGltZSA/IGAtLSBhZnRlciAke2NoYWxrLmN5YW4oYCR7cHJldHR5TXMoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSl9YCl9YCA6IG51bGwpO1xuICBjb25zdCBmYWtlOiBPcmFJbXBsID0ge1xuICAgIHN0YXJ0OiAoKSA9PiB7XG4gICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgZCgnUHJvY2VzcyBTdGFydGVkOicsIGZha2UudGV4dCk7XG4gICAgICByZXR1cm4gZmFrZTtcbiAgICB9LFxuICAgIGZhaWw6ICgpID0+IHtcbiAgICAgIGQoY2hhbGsucmVkKGBQcm9jZXNzIEZhaWxlZDogJHtmYWtlLnRleHR9YCksIHRpbWluZygpKTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgc3VjY2VlZDogKCkgPT4ge1xuICAgICAgZCgnUHJvY2VzcyBTdWNjZWVkZWQ6JywgZmFrZS50ZXh0LCB0aW1pbmcoKSk7XG4gICAgICByZXR1cm4gZmFrZTtcbiAgICB9LFxuICAgIHN0b3A6ICgpID0+IHtcbiAgICAgIGQoJ1Byb2Nlc3MgU3RvcHBlZDonLCBmYWtlLnRleHQsIHRpbWluZygpKTtcbiAgICAgIHJldHVybiBmYWtlO1xuICAgIH0sXG4gICAgd2FybjogKHdhcm5pbmc6IHN0cmluZykgPT4ge1xuICAgICAgZCgnUHJvY2VzcyBXYXJuZWQ6Jywgd2FybmluZywgdGltaW5nKCkpO1xuICAgICAgcmV0dXJuIGZha2U7XG4gICAgfSxcbiAgICBnZXQgdGV4dCgpIHtcbiAgICAgIHJldHVybiBvcmFOYW1lO1xuICAgIH0sXG4gICAgc2V0IHRleHQobmV3TmFtZTogc3RyaW5nKSB7XG4gICAgICBkKCdQcm9jZXNzIFJlbmFtZWQ6Jywgb3JhTmFtZSwgJyAtLT4gJywgbmV3TmFtZSk7XG4gICAgICBvcmFOYW1lID0gbmV3TmFtZTtcbiAgICB9LFxuICB9O1xuICByZXR1cm4gZmFrZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUZha2VPcmEgPyBmYWtlT3JhIDogcmVhbE9yYTtcbiJdLCJuYW1lcyI6WyJkIiwiZGVidWciLCJ1c2VGYWtlT3JhIiwiQm9vbGVhbiIsInByb2Nlc3MiLCJlbnYiLCJERUJVRyIsImluY2x1ZGVzIiwiY29uc29sZSIsIndhcm4iLCJjaGFsayIsInJlZCIsImZha2VPcmEiLCJuYW1lIiwib3JhTmFtZSIsInN0YXJ0VGltZSIsInRpbWluZyIsImN5YW4iLCJwcmV0dHlNcyIsIkRhdGUiLCJub3ciLCJmYWtlIiwic3RhcnQiLCJ0ZXh0IiwiZmFpbCIsInN1Y2NlZWQiLCJzdG9wIiwid2FybmluZyIsIm5ld05hbWUiLCJyZWFsT3JhIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFrQixHQUFPLENBQVAsTUFBTztBQUNQLEdBQU8sQ0FBUCxNQUFPOztBQUVMLEdBQUssQ0FBTCxJQUFLO0FBQ0osR0FBVyxDQUFYLFNBQVc7Ozs7OztBQUloQyxLQUFLLENBQUNBLENBQUMsT0FBR0MsTUFBSyxVQUFDLENBQTBCO0FBRTFDLEtBQUssQ0FBQ0MsVUFBVSxHQUFHQyxPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLElBQUlGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFnQjtBQUUzRixFQUFFLEVBQUVMLFVBQVUsRUFBRSxDQUFDO0lBQ2ZNLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxNQUFLLFNBQUNDLEdBQUcsQ0FBQyxDQUE2RjtJQUNwSEgsT0FBTyxDQUFDQyxJQUFJLENBQUNDLE1BQUssU0FBQ0MsR0FBRyxDQUFDLENBQTZEO0FBQ3RGLENBQUM7QUFFTSxLQUFLLENBQUNDLE9BQU8sSUFBSUMsSUFBWSxHQUFjLENBQUM7SUFDakQsR0FBRyxDQUFDQyxPQUFPLEdBQUdELElBQUk7SUFDbEIsR0FBRyxDQUFDRSxTQUFTLEdBQWtCLElBQUk7SUFDbkMsS0FBSyxDQUFDQyxNQUFNLE9BQVVELFNBQVMsSUFBSSxTQUFTLEVBQUVMLE1BQUssU0FBQ08sSUFBSSxRQUFJQyxTQUFRLFVBQUNDLElBQUksQ0FBQ0MsR0FBRyxLQUFLTCxTQUFTLFNBQVMsSUFBSTs7SUFDeEcsS0FBSyxDQUFDTSxJQUFJLEdBQVksQ0FBQztRQUNyQkMsS0FBSyxNQUFRLENBQUM7WUFDWlAsU0FBUyxHQUFHSSxJQUFJLENBQUNDLEdBQUc7WUFDcEJwQixDQUFDLENBQUMsQ0FBa0IsbUJBQUVxQixJQUFJLENBQUNFLElBQUk7WUFDL0IsTUFBTSxDQUFDRixJQUFJO1FBQ2IsQ0FBQztRQUNERyxJQUFJLE1BQVEsQ0FBQztZQUNYeEIsQ0FBQyxDQUFDVSxNQUFLLFNBQUNDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRVUsSUFBSSxDQUFDRSxJQUFJLEtBQUtQLE1BQU07WUFDbkQsTUFBTSxDQUFDSyxJQUFJO1FBQ2IsQ0FBQztRQUNESSxPQUFPLE1BQVEsQ0FBQztZQUNkekIsQ0FBQyxDQUFDLENBQW9CLHFCQUFFcUIsSUFBSSxDQUFDRSxJQUFJLEVBQUVQLE1BQU07WUFDekMsTUFBTSxDQUFDSyxJQUFJO1FBQ2IsQ0FBQztRQUNESyxJQUFJLE1BQVEsQ0FBQztZQUNYMUIsQ0FBQyxDQUFDLENBQWtCLG1CQUFFcUIsSUFBSSxDQUFDRSxJQUFJLEVBQUVQLE1BQU07WUFDdkMsTUFBTSxDQUFDSyxJQUFJO1FBQ2IsQ0FBQztRQUNEWixJQUFJLEdBQUdrQixPQUFlLEdBQUssQ0FBQztZQUMxQjNCLENBQUMsQ0FBQyxDQUFpQixrQkFBRTJCLE9BQU8sRUFBRVgsTUFBTTtZQUNwQyxNQUFNLENBQUNLLElBQUk7UUFDYixDQUFDO1lBQ0dFLElBQUksSUFBRyxDQUFDO1lBQ1YsTUFBTSxDQUFDVCxPQUFPO1FBQ2hCLENBQUM7WUFDR1MsSUFBSSxFQUFDSyxPQUFlLENBQUUsQ0FBQztZQUN6QjVCLENBQUMsQ0FBQyxDQUFrQixtQkFBRWMsT0FBTyxFQUFFLENBQU8sUUFBRWMsT0FBTztZQUMvQ2QsT0FBTyxHQUFHYyxPQUFPO1FBQ25CLENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDUCxJQUFJO0FBQ2IsQ0FBQztRQW5DWVQsT0FBTyxHQUFQQSxPQUFPO2VBcUNMVixVQUFVLEdBQUdVLE9BQU8sR0FBR2lCLElBQU8ifQ==