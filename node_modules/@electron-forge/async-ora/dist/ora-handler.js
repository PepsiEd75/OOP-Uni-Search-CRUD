"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var _ora = _interopRequireDefault(require("./ora"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class OraImpl {
    constructor(text = ''){
        this.text = text;
    }
    succeed(_symbol) {
        return this;
    }
    fail(_symbol) {
        return this;
    }
    start() {
        return this;
    }
    stop(_symbol) {
        return this;
    }
    warn(_message) {
        return this;
    }
}
exports.OraImpl = OraImpl;
const asyncOra = (initialOraValue, asyncFn, processExitFn = process.exit)=>{
    let fnOra = new OraImpl(initialOraValue);
    if (asyncOra.interactive) {
        fnOra = (0, _ora).default(initialOraValue).start();
    }
    return new Promise((resolve, reject)=>{
        asyncFn(fnOra).then(()=>{
            const wasPaused = process.stdin.isPaused();
            // Note: this may pause stdin as a side-effect in certain cases
            fnOra.succeed();
            if (asyncOra.keepStdinFlowing && !wasPaused && process.stdin.isPaused()) {
                process.stdin.resume();
            }
            return resolve();
        }).catch((err)=>{
            fnOra.fail();
            if (asyncOra.interactive) {
                if (err && err.message && err.stack) {
                    console.error(_chalk.default.red('\nAn unhandled error has occurred inside Forge:'));
                    console.error(_chalk.default.red(err.message));
                    console.error(_chalk.default.red(err.stack));
                } else {
                    console.error(_chalk.default.red('\nElectron Forge was terminated:'));
                    console.error(_chalk.default.red(typeof err === 'string' ? err : JSON.stringify(err)));
                }
                processExitFn(1);
                // If the process is still alive we should continue because either
                // something went really wrong or we are testing this function
                setTimeout(()=>resolve()
                , 500);
            } else {
                reject(err);
            }
        });
    });
};
asyncOra.interactive = true;
var _default = asyncOra;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcmEtaGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuXG5pbXBvcnQgb3JhIGZyb20gJy4vb3JhJztcblxuZXhwb3J0IGNsYXNzIE9yYUltcGwge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGV4dDogc3RyaW5nID0gJycpIHt9XG5cbiAgc3VjY2VlZChfc3ltYm9sPzogc3RyaW5nKTogT3JhSW1wbCB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmYWlsKF9zeW1ib2w/OiBzdHJpbmcpOiBPcmFJbXBsIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN0YXJ0KCk6IE9yYUltcGwge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3RvcChfc3ltYm9sPzogc3RyaW5nKTogT3JhSW1wbCB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB3YXJuKF9tZXNzYWdlOiBzdHJpbmcpOiBPcmFJbXBsIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzeW5jT3JhTWV0aG9kIHtcbiAgKGluaXRpYWxPcmFWYWx1ZTogc3RyaW5nLCBhc3luY0ZuOiAob3JhSW1wbDogT3JhSW1wbCkgPT4gUHJvbWlzZTx2b2lkPiwgcHJvY2Vzc0V4aXRGbj86IChjb2RlOiBudW1iZXIpID0+IHZvaWQpOiBQcm9taXNlPHZvaWQ+O1xuICBpbnRlcmFjdGl2ZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBrZWVwIHN0ZGluIHVucGF1c2VkIGlmIG9yYSBpbmFkdmVydGVudGx5IHBhdXNlcyBpdC4gQmV3YXJlIHRoYXRcbiAgICogZW5hYmxpbmcgdGhpcyBtYXkga2VlcCB0aGUgbm9kZSBwcm9jZXNzIGFsaXZlIGV2ZW4gd2hlbiB0aGVyZSBpcyBubyBtb3JlXG4gICAqIHdvcmsgdG8gYmUgZG9uZSwgYXMgaXQgd2lsbCBmb3JldmVyIGJlIHdhaXRpbmcgZm9yIGlucHV0IG9uIHN0ZGluLlxuICAgKlxuICAgKiBNb3JlIGNvbnRleHQ6XG4gICAqICAgaHR0cHM6Ly9naXRodWIuY29tL2VsZWN0cm9uL2ZvcmdlL2lzc3Vlcy8yMzE5XG4gICAqL1xuICBrZWVwU3RkaW5GbG93aW5nPzogYm9vbGVhbjtcbn1cblxuY29uc3QgYXN5bmNPcmE6IEFzeW5jT3JhTWV0aG9kID0gKGluaXRpYWxPcmFWYWx1ZSwgYXN5bmNGbiwgcHJvY2Vzc0V4aXRGbiA9IHByb2Nlc3MuZXhpdCkgPT4ge1xuICBsZXQgZm5PcmEgPSBuZXcgT3JhSW1wbChpbml0aWFsT3JhVmFsdWUpO1xuICBpZiAoYXN5bmNPcmEuaW50ZXJhY3RpdmUpIHtcbiAgICBmbk9yYSA9IG9yYShpbml0aWFsT3JhVmFsdWUpLnN0YXJ0KCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBhc3luY0ZuKGZuT3JhKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCB3YXNQYXVzZWQgPSBwcm9jZXNzLnN0ZGluLmlzUGF1c2VkKCk7XG5cbiAgICAgICAgLy8gTm90ZTogdGhpcyBtYXkgcGF1c2Ugc3RkaW4gYXMgYSBzaWRlLWVmZmVjdCBpbiBjZXJ0YWluIGNhc2VzXG4gICAgICAgIGZuT3JhLnN1Y2NlZWQoKTtcblxuICAgICAgICBpZiAoYXN5bmNPcmEua2VlcFN0ZGluRmxvd2luZyAmJiAhd2FzUGF1c2VkICYmIHByb2Nlc3Muc3RkaW4uaXNQYXVzZWQoKSkge1xuICAgICAgICAgIHByb2Nlc3Muc3RkaW4ucmVzdW1lKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGZuT3JhLmZhaWwoKTtcbiAgICAgICAgaWYgKGFzeW5jT3JhLmludGVyYWN0aXZlKSB7XG4gICAgICAgICAgaWYgKGVyciAmJiBlcnIubWVzc2FnZSAmJiBlcnIuc3RhY2spIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsucmVkKCdcXG5BbiB1bmhhbmRsZWQgZXJyb3IgaGFzIG9jY3VycmVkIGluc2lkZSBGb3JnZTonKSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZChlcnIubWVzc2FnZSkpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihjaGFsay5yZWQoZXJyLnN0YWNrKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY2hhbGsucmVkKCdcXG5FbGVjdHJvbiBGb3JnZSB3YXMgdGVybWluYXRlZDonKSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGNoYWxrLnJlZCh0eXBlb2YgZXJyID09PSAnc3RyaW5nJyA/IGVyciA6IEpTT04uc3RyaW5naWZ5KGVycikpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvY2Vzc0V4aXRGbigxKTtcbiAgICAgICAgICAvLyBJZiB0aGUgcHJvY2VzcyBpcyBzdGlsbCBhbGl2ZSB3ZSBzaG91bGQgY29udGludWUgYmVjYXVzZSBlaXRoZXJcbiAgICAgICAgICAvLyBzb21ldGhpbmcgd2VudCByZWFsbHkgd3Jvbmcgb3Igd2UgYXJlIHRlc3RpbmcgdGhpcyBmdW5jdGlvblxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCA1MDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfSk7XG59O1xuXG5hc3luY09yYS5pbnRlcmFjdGl2ZSA9IHRydWU7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jT3JhO1xuIl0sIm5hbWVzIjpbIk9yYUltcGwiLCJ0ZXh0Iiwic3VjY2VlZCIsIl9zeW1ib2wiLCJmYWlsIiwic3RhcnQiLCJzdG9wIiwid2FybiIsIl9tZXNzYWdlIiwiYXN5bmNPcmEiLCJpbml0aWFsT3JhVmFsdWUiLCJhc3luY0ZuIiwicHJvY2Vzc0V4aXRGbiIsInByb2Nlc3MiLCJleGl0IiwiZm5PcmEiLCJpbnRlcmFjdGl2ZSIsIm9yYSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsIndhc1BhdXNlZCIsInN0ZGluIiwiaXNQYXVzZWQiLCJrZWVwU3RkaW5GbG93aW5nIiwicmVzdW1lIiwiY2F0Y2giLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJjb25zb2xlIiwiZXJyb3IiLCJjaGFsayIsInJlZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFrQixHQUFPLENBQVAsTUFBTztBQUVULEdBQU8sQ0FBUCxJQUFPOzs7Ozs7TUFFVkEsT0FBTztnQkFDQ0MsSUFBWSxHQUFHLENBQUUsRUFBRSxDQUFDO2FBQXBCQSxJQUFZLEdBQVpBLElBQVk7SUFBUSxDQUFDO0lBRXhDQyxPQUFPLENBQUNDLE9BQWdCLEVBQVcsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSTtJQUNiLENBQUM7SUFFREMsSUFBSSxDQUFDRCxPQUFnQixFQUFXLENBQUM7UUFDL0IsTUFBTSxDQUFDLElBQUk7SUFDYixDQUFDO0lBRURFLEtBQUssR0FBWSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJO0lBQ2IsQ0FBQztJQUVEQyxJQUFJLENBQUNILE9BQWdCLEVBQVcsQ0FBQztRQUMvQixNQUFNLENBQUMsSUFBSTtJQUNiLENBQUM7SUFFREksSUFBSSxDQUFDQyxRQUFnQixFQUFXLENBQUM7UUFDL0IsTUFBTSxDQUFDLElBQUk7SUFDYixDQUFDOztRQXJCVVIsT0FBTyxHQUFQQSxPQUFPO0FBdUNwQixLQUFLLENBQUNTLFFBQVEsSUFBb0JDLGVBQWUsRUFBRUMsT0FBTyxFQUFFQyxhQUFhLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxHQUFLLENBQUM7SUFDNUYsR0FBRyxDQUFDQyxLQUFLLEdBQUcsR0FBRyxDQUFDZixPQUFPLENBQUNVLGVBQWU7SUFDdkMsRUFBRSxFQUFFRCxRQUFRLENBQUNPLFdBQVcsRUFBRSxDQUFDO1FBQ3pCRCxLQUFLLE9BQUdFLElBQUcsVUFBQ1AsZUFBZSxFQUFFTCxLQUFLO0lBQ3BDLENBQUM7SUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDYSxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxHQUFLLENBQUM7UUFDdkNULE9BQU8sQ0FBQ0ksS0FBSyxFQUNWTSxJQUFJLEtBQU8sQ0FBQztZQUNYLEtBQUssQ0FBQ0MsU0FBUyxHQUFHVCxPQUFPLENBQUNVLEtBQUssQ0FBQ0MsUUFBUTtZQUV4QyxFQUErRCxBQUEvRCw2REFBK0Q7WUFDL0RULEtBQUssQ0FBQ2IsT0FBTztZQUViLEVBQUUsRUFBRU8sUUFBUSxDQUFDZ0IsZ0JBQWdCLEtBQUtILFNBQVMsSUFBSVQsT0FBTyxDQUFDVSxLQUFLLENBQUNDLFFBQVEsSUFBSSxDQUFDO2dCQUN4RVgsT0FBTyxDQUFDVSxLQUFLLENBQUNHLE1BQU07WUFDdEIsQ0FBQztZQUVELE1BQU0sQ0FBQ1AsT0FBTztRQUNoQixDQUFDLEVBQ0FRLEtBQUssRUFBRUMsR0FBRyxHQUFLLENBQUM7WUFDZmIsS0FBSyxDQUFDWCxJQUFJO1lBQ1YsRUFBRSxFQUFFSyxRQUFRLENBQUNPLFdBQVcsRUFBRSxDQUFDO2dCQUN6QixFQUFFLEVBQUVZLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxPQUFPLElBQUlELEdBQUcsQ0FBQ0UsS0FBSyxFQUFFLENBQUM7b0JBQ3BDQyxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsTUFBSyxTQUFDQyxHQUFHLENBQUMsQ0FBaUQ7b0JBQ3pFSCxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsTUFBSyxTQUFDQyxHQUFHLENBQUNOLEdBQUcsQ0FBQ0MsT0FBTztvQkFDbkNFLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxNQUFLLFNBQUNDLEdBQUcsQ0FBQ04sR0FBRyxDQUFDRSxLQUFLO2dCQUNuQyxDQUFDLE1BQU0sQ0FBQztvQkFDTkMsT0FBTyxDQUFDQyxLQUFLLENBQUNDLE1BQUssU0FBQ0MsR0FBRyxDQUFDLENBQWtDO29CQUMxREgsT0FBTyxDQUFDQyxLQUFLLENBQUNDLE1BQUssU0FBQ0MsR0FBRyxDQUFDLE1BQU0sQ0FBQ04sR0FBRyxLQUFLLENBQVEsVUFBR0EsR0FBRyxHQUFHTyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1IsR0FBRztnQkFDNUUsQ0FBQztnQkFDRGhCLGFBQWEsQ0FBQyxDQUFDO2dCQUNmLEVBQWtFLEFBQWxFLGdFQUFrRTtnQkFDbEUsRUFBOEQsQUFBOUQsNERBQThEO2dCQUM5RHlCLFVBQVUsS0FBT2xCLE9BQU87a0JBQUksR0FBRztZQUNqQyxDQUFDLE1BQU0sQ0FBQztnQkFDTkMsTUFBTSxDQUFDUSxHQUFHO1lBQ1osQ0FBQztRQUNILENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQztBQUVEbkIsUUFBUSxDQUFDTyxXQUFXLEdBQUcsSUFBSTtlQUVaUCxRQUFRIn0=