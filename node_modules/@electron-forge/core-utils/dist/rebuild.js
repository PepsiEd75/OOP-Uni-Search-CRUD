"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.packagerRebuildHook = exports.listrCompatibleRebuildHook = void 0;
var cp = _interopRequireWildcard(require("child_process"));
var path = _interopRequireWildcard(require("path"));
var _asyncOra = require("@electron-forge/async-ora");
var _rebuild = require("@electron/rebuild");
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
const listrCompatibleRebuildHook = async (buildPath, electronVersion, platform, arch, config = {}, task)=>{
    var ref, ref1;
    task.title = 'Preparing native dependencies';
    const options = {
        ...config,
        buildPath,
        electronVersion,
        arch
    };
    const child = cp.fork(path.resolve(__dirname, 'remote-rebuild.js'), [
        JSON.stringify(options)
    ], {
        stdio: [
            'pipe',
            'pipe',
            'pipe',
            'ipc'
        ]
    });
    let pendingError;
    let found = 0;
    let done = 0;
    const redraw = ()=>{
        task.title = `Preparing native dependencies: ${done} / ${found}`;
    };
    (ref = child.stdout) === null || ref === void 0 ? void 0 : ref.on('data', (chunk)=>{
        task.output = chunk.toString();
    });
    (ref1 = child.stderr) === null || ref1 === void 0 ? void 0 : ref1.on('data', (chunk)=>{
        task.output = chunk.toString();
    });
    child.on('message', (message)=>{
        switch(message.msg){
            case 'module-found':
                {
                    found += 1;
                    redraw();
                    break;
                }
            case 'module-done':
                {
                    done += 1;
                    redraw();
                    break;
                }
            case 'rebuild-error':
                {
                    pendingError = new Error(message.err.message);
                    pendingError.stack = message.err.stack;
                    break;
                }
            case 'rebuild-done':
                {
                    task.task.rendererTaskOptions.persistentOutput = false;
                    break;
                }
        }
    });
    await new Promise((resolve, reject)=>{
        child.on('exit', (code)=>{
            if (code === 0 && !pendingError) {
                resolve();
            } else {
                reject(pendingError || new Error(`Rebuilder failed with exit code: ${code}`));
            }
        });
    });
};
exports.listrCompatibleRebuildHook = listrCompatibleRebuildHook;
const packagerRebuildHook = async (buildPath, electronVersion, _platform, arch, config = {})=>{
    await (0, _asyncOra).asyncOra('Preparing native dependencies', async (rebuildSpinner)=>{
        const rebuilder = (0, _rebuild).rebuild({
            ...config,
            buildPath,
            electronVersion,
            arch
        });
        const { lifecycle  } = rebuilder;
        let found = 0;
        let done = 0;
        const redraw = ()=>{
            rebuildSpinner.text = `Preparing native dependencies: ${done} / ${found}`;
        };
        lifecycle.on('module-found', ()=>{
            found += 1;
            redraw();
        });
        lifecycle.on('module-done', ()=>{
            done += 1;
            redraw();
        });
        await rebuilder;
    });
};
exports.packagerRebuildHook = packagerRebuildHook;

//# sourceMappingURL=data:application/json;base64,